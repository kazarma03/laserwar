<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:TestLaserwar">

    <!--Стиль кнопок главного меню-->
    <Style x:Key="MainButton" TargetType="Button">
        <Setter Property="BorderBrush" Value="#FF2C2C2C"></Setter>
        <Setter Property="Background" Value="#FF2C2C2C"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Background="{TemplateBinding Background}">
                        <ContentPresenter x:Name="MyContentPresenter" 
                                          Content="{TemplateBinding Content}"
                                          HorizontalAlignment="Center" 
                                          VerticalAlignment="Center" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="#FF2C2C2C"></Setter>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Background" Value="#FFBEE6FD"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--Стиль кнопоки Загрузка-->
    <Style x:Key="MainButtonDownload" BasedOn="{StaticResource MainButton}" TargetType="Button">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=ClickButtonDownLoad}" Value="true">
                <Setter Property="Background" Value="Blue" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <!--Стиль кнопоки Звуки-->
    <Style x:Key="MainButtonSound" BasedOn="{StaticResource MainButton}" TargetType="Button">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=ClickButtonSound}" Value="true">
                <Setter Property="Background" Value="Blue" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <!--Стиль кнопоки Игры-->
    <Style x:Key="MainButtonGame" BasedOn="{StaticResource MainButton}" TargetType="Button">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=ClickButtonGame}" Value="true">
                <Setter Property="Background" Value="Blue" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <!--________________________-->

    <!--Стиль вспомогательных кнопок на формах-->
    <Style x:Key="AccessoryButton" TargetType="Button">
        <Style.Setters>
            <Setter Property="BorderBrush" Value="Blue"></Setter>
            <Setter Property="Background" Value="Blue"></Setter>
            <Setter Property="Foreground" Value="WhiteSmoke"></Setter>
            <Setter Property="FontWeight" Value="Bold"></Setter>
            <Setter Property="FontSize" Value="13"></Setter>
            <Setter Property="Width" Value="180"></Setter>
            <Setter Property="Height" Value="40"></Setter>
        </Style.Setters>
    </Style>
    <Style x:Key="AccessoryButtonVK" TargetType="Button" BasedOn="{StaticResource AccessoryButton}">
        <Style.Setters>
            <Setter Property="BorderBrush" Value="Blue"></Setter>
            <Setter Property="Background" Value="WhiteSmoke"></Setter>
            <Setter Property="Foreground" Value="Blue"></Setter>
            <Setter Property="BorderThickness" Value="2 2 2 2"></Setter>
        </Style.Setters>
    </Style>

    <!--________________________-->

    <!--Стиль лейблов в шапке форм-->
    <Style x:Key="LabelMain" TargetType="Label">
        <Style.Setters>
            <Setter Property="FontSize" Value="26"></Setter>
            <Setter Property="Foreground" Value="Black"></Setter>
            <Setter Property="FontWeight" Value="Bold"></Setter>
            <Setter Property="HorizontalAlignment" Value="Left"></Setter>
        </Style.Setters>
    </Style>
    <!--________________________-->

    <!--Стиль подзаголовков в формах-->
    <Style x:Key="LabelSub" TargetType="Label">
        <Style.Setters>
            <Setter Property="FontSize" Value="13"></Setter>
            <Setter Property="Foreground" Value="#FF2C2C2C"></Setter>
            <Setter Property="FontWeight" Value="Bold"></Setter>
        </Style.Setters>
    </Style>
    <!--________________________-->

    <!--Стиль Чек боксов в ВК-->
    <Style x:Key="CheckBoxVk" TargetType="CheckBox">
        <Style.Setters>
            <Setter Property="FontSize" Value="13"></Setter>
            <Setter Property="Foreground" Value="#FF2C2C2C"></Setter>
            <Setter Property="FontWeight" Value="Bold"></Setter>
            <Setter Property="HorizontalAlignment" Value="Left"></Setter>
            <Setter Property="VerticalAlignment" Value="Center"></Setter>
        </Style.Setters>
    </Style>
    <!--________________________-->

    <!--Стиль Лист Бокс в ВК-->
    <Style x:Key="BoxVk" TargetType="ComboBox">
        <Style.Setters>
            <Setter Property="FontSize" Value="13"></Setter>
            <Setter Property="Foreground" Value="#FF2C2C2C"></Setter>
            <Setter Property="FontWeight" Value="Bold"></Setter>
            <Setter Property="HorizontalAlignment" Value="Left"></Setter>
            <Setter Property="VerticalAlignment" Value="Center"></Setter>
        </Style.Setters>
    </Style>

    <!--________________________-->
    
    <!--Стиль текст бокса для вывода ошибки и Json-->

    <Style x:Key="TextBoxMessageVK" TargetType="TextBox">
        <Style.Setters>
            <Setter Property="BorderBrush" Value="Blue"></Setter>
            <Setter Property="SelectionBrush" Value="White"></Setter>
            <Setter Property="TextWrapping" Value="Wrap"></Setter>
            <Setter Property="VerticalScrollBarVisibility" Value="Hidden"></Setter>
            <Setter Property="AcceptsReturn" Value="True"></Setter>
            <Setter Property="BorderThickness" Value="0"></Setter>
            <Setter Property="Background" Value="WhiteSmoke"></Setter>
            <Setter Property="Foreground" Value="#FF2C2C2C"></Setter>
            <Setter Property="IsReadOnly" Value="true"></Setter>
        </Style.Setters>
        <Style.Triggers>
             <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Background" Value="#FFBEE6FD"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <!--Стиль текст бокса для вывода ошибки и Json-->

    <Style x:Key="TextBoxMessage" TargetType="TextBox">
        <Style.Setters>
            <Setter Property="BorderBrush" Value="Blue"></Setter>
            <Setter Property="SelectionBrush" Value="White"></Setter>
            <Setter Property="TextWrapping" Value="Wrap"></Setter>
            <Setter Property="VerticalScrollBarVisibility" Value="Visible"></Setter>
            <Setter Property="AcceptsReturn" Value="True"></Setter>
            <Setter Property="BorderThickness" Value="0"></Setter>
            <Setter Property="Background" Value="WhiteSmoke"></Setter>
            <Setter Property="Foreground" Value="#FF2C2C2C"></Setter>
            <Setter Property="IsReadOnly" Value="true"></Setter>
        </Style.Setters>
    </Style>
    <!--________________________-->
    
    <!--Стиль Текст бокса и синей границей снизу-->
    <Style x:Key="TextBoxBorderLine" TargetType="TextBox">
        <Style.Setters>
            <Setter Property="Height" Value="20"></Setter>
            <Setter Property="Width" Value="350"></Setter>
            <Setter Property="BorderBrush" Value="Blue"></Setter>
            <Setter Property="SelectionBrush" Value="WhiteSmoke"></Setter>
            <Setter Property="BorderThickness" Value="0,0,0,2"></Setter>
            <Setter Property="Background" Value="WhiteSmoke"></Setter>
            <Setter Property="HorizontalAlignment" Value="Left"></Setter>
            <Setter Property="Margin" Value="5,0,0,10"></Setter>
            <Setter Property="Foreground" Value="#FF2C2C2C"></Setter>
        </Style.Setters>
    </Style>
    <!--________________________-->

    <!--Стиль Пасворд бокса и синей границей снизу-->
    <Style x:Key="PasswordBoxBorderLine" TargetType="PasswordBox">
        <Style.Setters>
            <Setter Property="Height" Value="20"></Setter>
            <Setter Property="Width" Value="350"></Setter>
            <Setter Property="BorderBrush" Value="Blue"></Setter>
            <Setter Property="SelectionBrush" Value="WhiteSmoke"></Setter>
            <Setter Property="BorderThickness" Value="0,0,0,2"></Setter>
            <Setter Property="Background" Value="WhiteSmoke"></Setter>
            <Setter Property="HorizontalAlignment" Value="Left"></Setter>
            <Setter Property="Margin" Value="5,0,0,10"></Setter>
            <Setter Property="Foreground" Value="#FF2C2C2C"></Setter>
        </Style.Setters>
    </Style>
    <!--________________________-->

    <!--Стиль вспомогательной кнопки-->
    <Style x:Key="ButtonReturn" TargetType="Button">
        <Setter Property="BorderBrush" Value="{x:Null}"></Setter>
        <Setter Property="Background" Value="{x:Null}"></Setter>
        <Setter Property="Width" Value="20"></Setter>
        <Setter Property="Height" Value="20"></Setter>
        <Setter Property="Margin" Value="0,0,0,30"></Setter>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Background="{TemplateBinding Background}">
                        <ContentPresenter x:Name="MyContentPresenter" 
                                          Content="{TemplateBinding Content}"
                                          HorizontalAlignment="Center" 
                                          VerticalAlignment="Center" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{x:Null}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Background" Value="#FFBEE6FD"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--Стиль групперовок в таблице детализация игр с экспандером без кнопки-->
    <Style x:Key="GroupHeaderStyle" TargetType="{x:Type GroupItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupItem}">
                    <Expander x:Name="exp" IsExpanded="True" >
                        <Expander.Header>
                            <StackPanel HorizontalAlignment="Left" Orientation="Horizontal">
                                <TextBlock Foreground="#FF2C2C2C" FontSize="16" FontWeight="Bold" Text="{Binding Name}" MinWidth="60"/>
                                <TextBlock Foreground="#FF2C2C2C" FontSize="10" FontWeight="Bold" Margin="20,7,0,5" Text="{Binding Path=ItemCount}" MinWidth="20"/>
                                <Image Height="7" Width="7" Margin="10,0,0,0" >
                                    <Image.Style>
                                        <Style TargetType="{x:Type Image}">
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding IsExpanded, ElementName=exp}" Value="True">
                                                    <Setter Property="Source" Value="~\..\resources\hide show.png"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding IsExpanded, ElementName=exp}" Value="false">
                                                    <Setter Property="Source" Value="~\..\resources\show.png"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Image.Style>
                                </Image>
                            </StackPanel>
                        </Expander.Header>
                        <ItemsPresenter/>
                        <Expander.Style>
                            <Style TargetType="Expander">
                                <Setter Property="IsExpanded" Value="False"></Setter>
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="{x:Type Expander}">
                                            <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                                                <DockPanel>
                                                    <ToggleButton x:Name="HeaderSite" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" Content="{TemplateBinding Header}" DockPanel.Dock="Top" Foreground="{TemplateBinding Foreground}" FontWeight="{TemplateBinding FontWeight}" FontStyle="{TemplateBinding FontStyle}" FontStretch="{TemplateBinding FontStretch}" FontSize="{TemplateBinding FontSize}" FontFamily="{TemplateBinding FontFamily}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" MinWidth="0" MinHeight="0" Padding="{TemplateBinding Padding}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}">
                                                        <ToggleButton.Template>
                                                            <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                                <Border Padding="{TemplateBinding Padding}">
                                                                    <ContentPresenter Margin="0,4,0,0" Grid.Row="1" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Top"/>
                                                                </Border>
                                                            </ControlTemplate>
                                                        </ToggleButton.Template>
                                                    </ToggleButton>
                                                    <ContentPresenter x:Name="ExpandSite" DockPanel.Dock="Bottom" Focusable="false" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" Visibility="Collapsed" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                                </DockPanel>
                                            </Border>
                                            <ControlTemplate.Triggers>
                                                <Trigger Property="IsExpanded" Value="true">
                                                    <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
                                                </Trigger>
                                                <Trigger Property="ExpandDirection" Value="Right">
                                                    <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Right"/>
                                                    <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Left"/>
                                                    <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderRightHeaderStyle}"/>
                                                </Trigger>
                                                <Trigger Property="ExpandDirection" Value="Up">
                                                    <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Top"/>
                                                    <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Bottom"/>
                                                    <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderUpHeaderStyle}"/>
                                                </Trigger>
                                                <Trigger Property="ExpandDirection" Value="Left">
                                                    <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Left"/>
                                                    <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Right"/>
                                                    <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderLeftHeaderStyle}"/>
                                                </Trigger>
                                                <Trigger Property="IsEnabled" Value="false">
                                                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                                </Trigger>
                                            </ControlTemplate.Triggers>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Name}" Value="Title" >
                                        <Setter Property="IsExpanded" Value="True"></Setter>
                                        <Setter Property="IsEnabled" Value="False" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Expander.Style>
                    </Expander>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>